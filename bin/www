#!/usr/bin/env node

/**
 * Module dependencies.
 */

var config = require('../app_config');
var http_app = require('../lib/http_app');
var https_app = require('../app');
var debug = require('debug')('myApp:server');
var https = require('https');
var http = require('http');

var fs = require('fs');

var options = {
    key: fs.readFileSync('server_cert/key.pem'),
    cert: fs.readFileSync('server_cert/cert.pem')
};

/**
 * Get port from environment and store in Express.
 */

var http_port = normalizePort(config.http_port);
http_app.set('port', http_port);

var https_port = normalizePort(config.https_port);
https_app.set('port', https_port);

/**
 * Create HTTP server.
 */

var http_server = http.createServer(http_app);

/**
 * Create HTTPS server.
 */

var https_server = https.createServer(options, https_app);

/**
 * Listen on provided port, on all network interfaces.
 */

http_server.listen(http_port);
http_server.on('error', onErrorHTTP);
http_server.on('listening', onListeningHTTP);

https_server.listen(https_port);
https_server.on('error', onErrorHTTPS);
https_server.on('listening', onListeningHTTPS);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onErrorHTTP(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + https_port
        : 'Port ' + https_port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

function onErrorHTTPS(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + https_port
        : 'Port ' + https_port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListeningHTTP() {
    var addr = http_server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('HTTP listening on ' + bind);
}

function onListeningHTTPS() {
    var addr = https_server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('HTTPS listening on ' + bind);
}
